# -*- coding: utf-8 -*-
"""Project 140.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1El0HHDPtxg_jqtdmKa3wpCiEnPkLO-P8
"""

!pip install kaggle

from google.colab import files
files.upload()

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d gspmoreira/articles-sharing-reading-from-cit-deskdrop

!unzip articles-sharing-reading-from-cit-deskdrop.zip

import pandas as pd
import numpy as np

df_shared_articles = pd.read_csv("shared_articles.csv")
df_users_interactions = pd.read_csv("users_interactions.csv")

df_users_interactions.head()

df_shared_articles = df_shared_articles[df_shared_articles['eventType'] == "CONTENT SHARED"]

print(len(df_shared_articles))
df_shared_articles.head()

def findTotalEvents(x):
  total_likes = df_users_interactions[(df_users_interactions["contentId"] == x["contentId"]) & (df_users_interactions["eventType"] == "LIKE")].shape[0]
  total_views = df_users_interactions[(df_users_interactions["contentId"] == x["contentId"]) & (df_users_interactions["eventType"] == "VIEW")].shape[0]
  total_bookmarks = df_users_interactions[(df_users_interactions["contentId"] == x["contentId"]) & (df_users_interactions["eventType"] == "BOOKMARK")].shape[0]
  total_follows = df_users_interactions[(df_users_interactions["contentId"] == x["contentId"]) & (df_users_interactions["eventType"] == "FOLLOW")].shape[0]
  total_comment_created = df_users_interactions[(df_users_interactions["contentId"] == x["contentId"]) & (df_users_interactions["eventType"] == "COMMENT CREATED")].shape[0]
  return total_likes + total_views + total_bookmarks + total_follows + total_comment_created

df_shared_articles["total_events"] = df_shared_articles.apply(findTotalEvents, axis=1)

df_shared_articles = df_shared_articles.sort_values('total_events', ascending = False)
df_shared_articles[['timestamp', 'authorSessionId', 'contentType', 'url', 'title' , 'text', 'lang' ,'total_events']].head(10)

def converting_to_lowerCase(x):
  if isinstance(x, str):
    return str.lower(x.replace(" ", ""))
  else:
    return " "

df_shared_articles["title"] = df_shared_articles["title"].apply(converting_to_lowerCase)

df_shared_articles[['timestamp', 'authorSessionId', 'contentType', 'url', 'title' , 'text', 'lang' ,'total_events']]

from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics.pairwise import cosine_similarity

count = CountVectorizer(stop_words = "english")
data_matrix = count.fit_transform(df_shared_articles["title"])

cosine_simil = cosine_similarity(data_matrix, data_matrix)

df_movies = df_shared_articles.reset_index()
indices = pd.Series(df_shared_articles.index, index = df_shared_articles['title'])

def Recomendations(title, cosine_sim):
  index = indices[title]
  
  total_events = list(enumerate(cosine_sim[index]))
  total_events = sorted(total_events, key = lambda x:x[1], reverse = True)
  total_events = total_events[1:11]

  articles_index = [i[0] for i in total_events]
  return df_shared_articles['title'].iloc[articles_index]

Recomendations("pullrequestfirst-practicalblend", cosine_simil)